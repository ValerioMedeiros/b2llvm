IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r  END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r SEES COMPSEES END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( ID ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 32767 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( -32768 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_BOOL ( FALSE ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_BOOL ( TRUE ) END
IMPLEMENTATION ID1 ( ID ) CONCRETE_CONSTANTS const_rec PROPERTIES const_rec: struct( aa : INT) VALUES  const_rec =  rec( aa : 1) REFINES COMPREF_r  IMPORTS xxx.COMPIMP_INT ( const_rec ' aa )END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( ID ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( vec(0) ) CONCRETE_CONSTANTS  vec  PROPERTIES     vec = { 0|-> 0, 1|->1} /* type */ VALUES     vec = { 0|-> 0, 1|->1}  /* value */ END
IMPLEMENTATION ID1 ( ID ) CONCRETE_CONSTANTS const_rec, vec PROPERTIES const_rec: struct( aa : INT) &  vec = { 0|-> 0, 1|->1} VALUES  const_rec =  rec( aa : 1) ; vec = { 0|-> 0, 1|->1} REFINES COMPREF_r  IMPORTS xxx.COMPIMP_INT (vec ( const_rec ' aa ))END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 + 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 - 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( - 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 * 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 / 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 mod 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( 0 ** 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( succ ( 0 ) ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( pred ( 0 ) ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP_INT ( ( 0 ) ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( 0 .. 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( NAT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( NAT1 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( INT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS xxx.COMPIMP ( BOOL ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPIMP_op IMPORTS COMPIMP(NAT) PROMOTES do INITIALISATION var:= 0 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r EXTENDS xxx.COMPIMP_INT ( 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r SETS simplerange VALUES simplerange = 0..3 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r SETS simpleset = { a0 } END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_CONSTANTS simpleconstant PROPERTIES simpleconstant : NAT VALUES simpleconstant = 1  END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simpleconstant PROPERTIES simpleconstant : NAT VALUES simpleconstant = 1  END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r PROPERTIES 0 = 0 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r PROPERTIES 0 /= 0 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simpleconstant PROPERTIES simpleconstant : INT  VALUES simpleconstant = MAXINT END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL VALUES simplebool = bool ( MAXINT = MAXINT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool = bool ( MAXINT /= MAXINT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool = bool ( MAXINT < MAXINT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool = bool ( MAXINT > MAXINT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool = bool ( MAXINT <= MAXINT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool = bool ( MAXINT >= MAXINT ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool =  bool ( MAXINT = MAXINT & MININT = MININT )END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool =  bool ( MAXINT = MAXINT or MININT = MININT )END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool =  bool ( not ( 0 = 1 ))END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simplebool PROPERTIES simplebool : BOOL  VALUES simplebool =  bool ( not ( 0 = 1 ))END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simpleconstant PROPERTIES simpleconstant : INT  VALUES simpleconstant = MAXINT END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONSTANTS simpleset PROPERTIES simpleset <: NAT  VALUES simpleset = 0 .. 0 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_VARIABLES vari INVARIANT vari : INT INITIALISATION vari :=1 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INVARIANT 0 = 0 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r ASSERTIONS 0 = 0 END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INITIALISATION BEGIN skip END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_VARIABLES vari_array INVARIANT vari_array : 0..MAXINT --> NAT INITIALISATION BEGIN vari_array ( MAXINT ) := MAXINT END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_VARIABLES vari_int INVARIANT vari_int : INT INITIALISATION BEGIN vari_int := 1 END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_VARIABLES var_rec INVARIANT var_rec : struct( aa : INT) INITIALISATION var_rec:= rec( aa : 1); BEGIN var_rec ' aa := MAXINT END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS COMPIMP(ID) CONCRETE_VARIABLES vari_int INVARIANT vari_int : INT INITIALISATION  BEGIN  vari_int <-- do_int ( MAXINT ) END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r IMPORTS COMPIMP(ID) CONCRETE_VARIABLES vari_int INVARIANT vari_int : INT INITIALISATION  BEGIN vari_int <-- do_string ( "Hello" ) END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INITIALISATION VAR var_temp IN var_temp:=1 END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_VARIABLES vari_bool INVARIANT vari_bool : BOOL INITIALISATION vari_bool := bool ( 0 = 0 ) END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INITIALISATION IF ID = ID THEN skip  ELSE skip END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INITIALISATION IF ID = ID THEN skip   END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r CONCRETE_VARIABLES vari_bool INVARIANT vari_bool : BOOL INITIALISATION vari_bool:= FALSE; CASE vari_bool OF EITHER TRUE THEN skip  ELSE skip END END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INITIALISATION ASSERT 0 = 0 THEN skip END END
IMPLEMENTATION ID1 ( ID ) REFINES COMPREF_r INITIALISATION skip ; skip END
IMPLEMENTATION ID1 ( ID ) REFINES COMPIMP OPERATIONS do = BEGIN skip END; res <-- do_int (value)  =  BEGIN res := value + 0 END ; res <-- do_string (value)  = BEGIN res := 0 END END
