;; -*- mode: asm -*-
;;   file generated with b2llvm
;;   B project settings: project.xml
;;   B module: Division
;;   B project directory: bxml
;;   code generation mode: component
;;   output file: Division.llvm
;;   
;;   This file contains LLVM code that implements B machine "Division".
;;   It is registered as a developed machine.
;;   The produced LLVM code is based on B implementation "DivisionImplOk".
;;   
;;1 The function implementing initialisation for "Division" is "@Division$init$"
;;   and has the following parameters:
;;1.1 "%self$": address of LLVM aggregate storing state of "Division";
define void @Division$init$() {
;;1.2 The entry point of the initialisation is:
entry:
;;1.3 Execute substitutions in initialisation of "DivisionImplOk" then exits:
  br label %exit
;;1.4 The exit point of the initialisation is:
exit:
  ret void
}
;;2 The LLVM function implementing B operation "div" in "DivisionImplOk" follows.
define void @Division$div(i32 %aa, i32 %bb, i32* %qq, i32* %rr) {
entry:
;;2.1 local variable declarations implemented as frame stack allocations
;;2.1.1 frame stack allocation for variable qq_Ret
  %qq_Ret = alloca i32
;;2.1.2 frame stack allocation for variable rr_Ret
  %rr_Ret = alloca i32
;;2.2 Execute assignment "rr_Ret := aa":
;;2.2.1 Evaluate expression "aa".
;;2.2.1.1 Operation parameter "aa" is LLVM parameter "%aa".
;;       The evaluation of "aa" is "%aa".
;;2.2.2 Evaluate address for "rr_Ret".
;;2.2.2.1 "rr_Ret" is stored in the frame stack and represented by "%rr_Ret".
;;2.2.3 Store value at address to achieve assignment.
  store i32 %aa, i32* %rr_Ret
;;2.3 Execute assignment "qq_Ret := 0":
;;2.3.1 Evaluate expression "0".
;;2.3.1.1 An integer literal is represented as such in LLVM.
;;       The evaluation of "0" is "0".
;;2.3.2 Evaluate address for "qq_Ret".
;;2.3.2.1 "qq_Ret" is stored in the frame stack and represented by "%qq_Ret".
;;2.3.3 Store value at address to achieve assignment.
  store i32 0, i32* %qq_Ret
;;2.4 Execute "WHILE rr_Ret >= bb DO..." and branch to "label0".
;;2.4.1 Evaluate loop guard "rr_Ret >= bb".
  br label %label1
label1:
;;2.4.2 Evaluate formula "rr_Ret >= bb", branch to "label2" if true, to "label0" otherwise.
;;2.4.2.1 Evaluate expression "rr_Ret".
;;2.4.2.1.1 B local variable "rr_Ret" is on the LLVM stack at address "%rr_Ret".
;;2.4.2.1.2 Temporary "%0" gets the contents from this position.
  %0 = load i32* %rr_Ret
;;         The evaluation of "rr_Ret" is "%0".
;;2.4.2.2 Evaluate expression "bb".
;;2.4.2.2.1 Operation parameter "bb" is LLVM parameter "%bb".
;;         The evaluation of "bb" is "%bb".
;;2.4.2.3 Temporary "%1" gets the value of "rr_Ret >= bb".
  %1 = icmp sge i32 %0, %bb
  br i1 %1, label %label2, label %label0
;;2.4.3 Execute loop body "BEGIN  qq_Ret := qq_R...".
label2:
;;2.4.4 Execute assignment "qq_Ret := qq_Ret + 1":
;;2.4.4.1 Evaluate expression "qq_Ret + 1".
;;2.4.4.1.1 Evaluate expression "qq_Ret".
;;2.4.4.1.1.1 B local variable "qq_Ret" is on the LLVM stack at address "%qq_Ret".
;;2.4.4.1.1.2 Temporary "%2" gets the contents from this position.
  %2 = load i32* %qq_Ret
;;           The evaluation of "qq_Ret" is "%2".
;;2.4.4.1.2 Evaluate expression "1".
;;2.4.4.1.2.1 An integer literal is represented as such in LLVM.
;;           The evaluation of "1" is "1".
;;2.4.4.1.3 Let temporary "%3" get the value of "qq_Ret + 1".
  %3 = add i32 %2, 1
;;         The evaluation of "qq_Ret + 1" is "%3".
;;2.4.4.2 Evaluate address for "qq_Ret".
;;2.4.4.2.1 "qq_Ret" is stored in the frame stack and represented by "%qq_Ret".
;;2.4.4.3 Store value at address to achieve assignment.
  store i32 %3, i32* %qq_Ret
;;2.4.5 Execute assignment "rr_Ret := rr_Ret - bb":
;;2.4.5.1 Evaluate expression "rr_Ret - bb".
;;2.4.5.1.1 Evaluate expression "rr_Ret".
;;2.4.5.1.1.1 B local variable "rr_Ret" is on the LLVM stack at address "%rr_Ret".
;;2.4.5.1.1.2 Temporary "%4" gets the contents from this position.
  %4 = load i32* %rr_Ret
;;           The evaluation of "rr_Ret" is "%4".
;;2.4.5.1.2 Evaluate expression "bb".
;;2.4.5.1.2.1 Operation parameter "bb" is LLVM parameter "%bb".
;;           The evaluation of "bb" is "%bb".
;;2.4.5.1.3 Let temporary "%5" get the value of "rr_Ret - bb".
  %5 = sub i32 %4, %bb
;;         The evaluation of "rr_Ret - bb" is "%5".
;;2.4.5.2 Evaluate address for "rr_Ret".
;;2.4.5.2.1 "rr_Ret" is stored in the frame stack and represented by "%rr_Ret".
;;2.4.5.3 Store value at address to achieve assignment.
  store i32 %5, i32* %rr_Ret
  br label %label1
label0:
;;2.5 Execute assignment "qq := qq_Ret":
;;2.5.1 Evaluate expression "qq_Ret".
;;2.5.1.1 B local variable "qq_Ret" is on the LLVM stack at address "%qq_Ret".
;;2.5.1.2 Temporary "%6" gets the contents from this position.
  %6 = load i32* %qq_Ret
;;       The evaluation of "qq_Ret" is "%6".
;;2.5.2 Evaluate address for "qq".
;;2.5.2.1 "qq" is stored in the frame stack and represented by "%qq".
;;2.5.3 Store value at address to achieve assignment.
  store i32 %6, i32* %qq
;;2.6 Execute assignment "rr := rr_Ret":
;;2.6.1 Evaluate expression "rr_Ret".
;;2.6.1.1 B local variable "rr_Ret" is on the LLVM stack at address "%rr_Ret".
;;2.6.1.2 Temporary "%7" gets the contents from this position.
  %7 = load i32* %rr_Ret
;;       The evaluation of "rr_Ret" is "%7".
;;2.6.2 Evaluate address for "rr".
;;2.6.2.1 "rr" is stored in the frame stack and represented by "%rr".
;;2.6.3 Store value at address to achieve assignment.
  store i32 %7, i32* %rr
  br label %exit
exit:
  ret void
}
