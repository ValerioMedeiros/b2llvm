;; -*- mode: asm -*-
;;   file generated with b2llvm
;;   B project settings: project.xml
;;   B module: Prime
;;   B project directory: bxml
;;   code generation mode: component
;;   output file: Prime.llvm
;;   
;;   This file contains LLVM code that implements B machine "Prime".
;;   It is registered as a developed machine.
;;   The produced LLVM code is based on B implementation "PrimeImp".
;;   
;;1 The function implementing initialisation for "Prime" is "@Prime$init$"
;;   and has the following parameters:
;;1.1 "%self$": address of LLVM aggregate storing state of "Prime";
define void @Prime$init$() {
;;1.2 The entry point of the initialisation is:
entry:
;;1.3 Execute substitutions in initialisation of "PrimeImp" then exits:
  br label %exit
;;1.4 The exit point of the initialisation is:
exit:
  ret void
}
;;2 The LLVM function implementing B operation "IsPrime" in "PrimeImp" follows.
define void @Prime$IsPrime(i32 %xx, i1* %rr) {
entry:
;;2.1 local variable declarations implemented as frame stack allocations
;;2.1.1 frame stack allocation for variable yy
  %yy = alloca i32
;;2.1.2 frame stack allocation for variable res
  %res = alloca i32
;;2.2 Execute assignment "yy := 2":
;;2.2.1 Evaluate expression "2".
;;2.2.1.1 An integer literal is represented as such in LLVM.
;;       The evaluation of "2" is "2".
;;2.2.2 Evaluate address for "yy".
;;2.2.2.1 "yy" is stored in the frame stack and represented by "%yy".
;;2.2.3 Store value at address to achieve assignment.
  store i32 2, i32* %yy
;;2.3 Execute assignment "res := << UNRECOGNIZED >>":
;;2.3.1 Evaluate expression "<< UNRECOGNIZED >>".
;;2.3.1.1 Evaluate expression "xx".
;;2.3.1.1.1 Operation parameter "xx" is LLVM parameter "%xx".
;;         The evaluation of "xx" is "%xx".
;;2.3.1.2 Evaluate expression "yy".
;;2.3.1.2.1 B local variable "yy" is on the LLVM stack at address "%yy".
;;2.3.1.2.2 Temporary "%0" gets the contents from this position.
  %0 = load i32* %yy
;;         The evaluation of "yy" is "%0".
;;2.3.1.3 Let temporary "%1" get the value of "<< UNRECOGNIZED >>".
  %1 = srem i32 %xx, %0
;;       The evaluation of "<< UNRECOGNIZED >>" is "%1".
;;2.3.2 Evaluate address for "res".
;;2.3.2.1 "res" is stored in the frame stack and represented by "%res".
;;2.3.3 Store value at address to achieve assignment.
  store i32 %1, i32* %res
;;2.4 Execute "WHILE yy < xx and res..." and branch to "label0".
;;2.4.1 Evaluate loop guard "yy < xx and res != 0".
  br label %label1
label1:
;;2.4.2 Evaluate formula "yy < xx and res != 0", branch to "label2" if true, to "label0" otherwise.
;;2.4.2.1 Evaluate conjunction "yy < xx and res != 0", branch to "label2" if true, to "label0" otherwise.
;;2.4.2.1.1 Create a fresh label "label4".
;;2.4.2.1.2 Evaluate formula "yy < xx", branch to "label4" if true, to "label0" otherwise.
;;2.4.2.1.2.1 Evaluate expression "yy".
;;2.4.2.1.2.1.1 B local variable "yy" is on the LLVM stack at address "%yy".
;;2.4.2.1.2.1.2 Temporary "%2" gets the contents from this position.
  %2 = load i32* %yy
;;             The evaluation of "yy" is "%2".
;;2.4.2.1.2.2 Evaluate expression "xx".
;;2.4.2.1.2.2.1 Operation parameter "xx" is LLVM parameter "%xx".
;;             The evaluation of "xx" is "%xx".
;;2.4.2.1.2.3 Temporary "%3" gets the value of "yy < xx".
  %3 = icmp slt i32 %2, %xx
  br i1 %3, label %label4, label %label0
label4:
;;2.4.2.1.3 Evaluate formula "res != 0", branch to "label2" if true, to "label0" otherwise.
;;2.4.2.1.3.1 Evaluate expression "res".
;;2.4.2.1.3.1.1 B local variable "res" is on the LLVM stack at address "%res".
;;2.4.2.1.3.1.2 Temporary "%4" gets the contents from this position.
  %4 = load i32* %res
;;             The evaluation of "res" is "%4".
;;2.4.2.1.3.2 Evaluate expression "0".
;;2.4.2.1.3.2.1 An integer literal is represented as such in LLVM.
;;             The evaluation of "0" is "0".
;;2.4.2.1.3.3 Temporary "%5" gets the value of "res != 0".
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %label2, label %label0
;;2.4.3 Execute loop body "yy := yy + 1".
label2:
;;2.4.4 Execute assignment "yy := yy + 1":
;;2.4.4.1 Evaluate expression "yy + 1".
;;2.4.4.1.1 Evaluate expression "yy".
;;2.4.4.1.1.1 B local variable "yy" is on the LLVM stack at address "%yy".
;;2.4.4.1.1.2 Temporary "%6" gets the contents from this position.
  %6 = load i32* %yy
;;           The evaluation of "yy" is "%6".
;;2.4.4.1.2 Evaluate expression "1".
;;2.4.4.1.2.1 An integer literal is represented as such in LLVM.
;;           The evaluation of "1" is "1".
;;2.4.4.1.3 Let temporary "%7" get the value of "yy + 1".
  %7 = add i32 %6, 1
;;         The evaluation of "yy + 1" is "%7".
;;2.4.4.2 Evaluate address for "yy".
;;2.4.4.2.1 "yy" is stored in the frame stack and represented by "%yy".
;;2.4.4.3 Store value at address to achieve assignment.
  store i32 %7, i32* %yy
  br label %label1
label0:
;;2.5 Execute "IF yy = xx THEN  rr :..." and branch to "label5".
;;2.5.1 execute if branch "IF yy = xx THEN  rr :..."
;;2.5.2 Evaluate formula "yy = xx", branch to "label6" if true, to "label7" otherwise.
;;2.5.2.1 Evaluate expression "yy".
;;2.5.2.1.1 B local variable "yy" is on the LLVM stack at address "%yy".
;;2.5.2.1.2 Temporary "%8" gets the contents from this position.
  %8 = load i32* %yy
;;         The evaluation of "yy" is "%8".
;;2.5.2.2 Evaluate expression "xx".
;;2.5.2.2.1 Operation parameter "xx" is LLVM parameter "%xx".
;;         The evaluation of "xx" is "%xx".
;;2.5.2.3 Temporary "%9" gets the value of "yy = xx".
  %9 = icmp eq i32 %8, %xx
  br i1 %9, label %label6, label %label7
label6:
;;2.5.3 Execute assignment "rr := TRUE":
;;2.5.3.1 Evaluate expression "TRUE".
;;2.5.3.1.1 A Boolean literal is represented as a one-bit integer in LLVM.
;;         The evaluation of "TRUE" is "1".
;;2.5.3.2 Evaluate address for "rr".
;;2.5.3.2.1 "rr" is stored in the frame stack and represented by "%rr".
;;2.5.3.3 Store value at address to achieve assignment.
  store i1 1, i1* %rr
  br label %label5
label7:
;;2.5.4 execute if branch "ELSE  rr := FALSE END"
;;2.5.5 Execute assignment "rr := FALSE":
;;2.5.5.1 Evaluate expression "FALSE".
;;2.5.5.1.1 A Boolean literal is represented as a one-bit integer in LLVM.
;;         The evaluation of "FALSE" is "0".
;;2.5.5.2 Evaluate address for "rr".
;;2.5.5.2.1 "rr" is stored in the frame stack and represented by "%rr".
;;2.5.5.3 Store value at address to achieve assignment.
  store i1 0, i1* %rr
  br label %label5
label5:
  br label %exit
exit:
  ret void
}
