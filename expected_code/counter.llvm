;; -*- mode: asm -*-
;;   file generated with b2llvm
;;   B project settings: project.xml
;;   B module: counter
;;   B project directory: bxml
;;   code generation mode: component
;;   output file: counter.llvm
;;   
;;   This file contains LLVM code that implements B machine "counter".
;;   It is registered as a developed machine.
;;   The produced LLVM code is based on B implementation "counter_i".
;;   
;;1 The type encoding the state of "counter" is an aggregate and is defined as
;;   (using implementation "counter_i"):
;;1.1 Position "0" represents "value".
;;1.2 Position "1" represents "error".
%counter$state$ = type {i32, i1}
;;2 The type for references to state encodings of "counter" is:
%counter$ref$ = type %counter$state$*
;;3 The function implementing initialisation for "counter" is "@counter$init$"
;;   and has the following parameters:
;;3.1 "%self$": address of LLVM aggregate storing state of "counter";
define void @counter$init$(%counter$ref$ %self$) {
;;3.2 The entry point of the initialisation is:
entry:
;;3.3 Execute substitutions in initialisation of "counter_i" then exits:
;;3.3.1 Execute assignment "value := 0":
;;3.3.1.1 Evaluate expression "0".
;;3.3.1.1.1 An integer literal is represented as such in LLVM.
;;         The evaluation of "0" is "0".
;;3.3.1.2 Evaluate address for "value".
;;3.3.1.2.1 Variable "value" is stored at position 0 of "%self$".
;;           Let temporary %0 be the corresponding address:
  %0 = getelementptr %counter$ref$ %self$, i32 0, i32 0
;;3.3.1.3 Store value at address to achieve assignment.
  store i32 0, i32* %0
;;3.3.2 Execute assignment "error := FALSE":
;;3.3.2.1 Evaluate expression "FALSE".
;;3.3.2.1.1 A Boolean literal is represented as a one-bit integer in LLVM.
;;         The evaluation of "FALSE" is "0".
;;3.3.2.2 Evaluate address for "error".
;;3.3.2.2.1 Variable "error" is stored at position 1 of "%self$".
;;           Let temporary %1 be the corresponding address:
  %1 = getelementptr %counter$ref$ %self$, i32 0, i32 1
;;3.3.2.3 Store value at address to achieve assignment.
  store i1 0, i1* %1
  br label %exit
;;3.4 The exit point of the initialisation is:
exit:
  ret void
}
;;4 The LLVM function implementing B operation "zero" in "counter_i" follows.
define void @counter$zero(%counter$ref$ %self$) {
entry:
;;4.1 Execute assignment "value := 0":
;;4.1.1 Evaluate expression "0".
;;4.1.1.1 An integer literal is represented as such in LLVM.
;;       The evaluation of "0" is "0".
;;4.1.2 Evaluate address for "value".
;;4.1.2.1 Variable "value" is stored at position 0 of "%self$".
;;         Let temporary %0 be the corresponding address:
  %0 = getelementptr %counter$ref$ %self$, i32 0, i32 0
;;4.1.3 Store value at address to achieve assignment.
  store i32 0, i32* %0
;;4.2 Execute assignment "error := FALSE":
;;4.2.1 Evaluate expression "FALSE".
;;4.2.1.1 A Boolean literal is represented as a one-bit integer in LLVM.
;;       The evaluation of "FALSE" is "0".
;;4.2.2 Evaluate address for "error".
;;4.2.2.1 Variable "error" is stored at position 1 of "%self$".
;;         Let temporary %1 be the corresponding address:
  %1 = getelementptr %counter$ref$ %self$, i32 0, i32 1
;;4.2.3 Store value at address to achieve assignment.
  store i1 0, i1* %1
  br label %exit
exit:
  ret void
}
;;5 The LLVM function implementing B operation "inc" in "counter_i" follows.
define void @counter$inc(%counter$ref$ %self$) {
entry:
;;5.1 Execute "IF value < 2147483647..." and branch to "exit".
;;5.1.1 execute if branch "IF value < 2147483647..."
;;5.1.2 Evaluate formula "value < 2147483647", branch to "label0" if true, to "label1" otherwise.
;;5.1.2.1 Evaluate expression "value".
;;5.1.2.1.1 State variable "value" is stored at position "0" of "%self$".
;;5.1.2.1.2 Let temporary "%0" be the corresponding address.
  %0 = getelementptr %counter$ref$ %self$, i32 0, i32 0
  %1 = load i32* %0
;;         The evaluation of "value" is "%1".
;;5.1.2.2 Evaluate expression "2147483647".
;;5.1.2.2.1 An integer literal is represented as such in LLVM.
;;         The evaluation of "2147483647" is "2147483647".
;;5.1.2.3 Temporary "%2" gets the value of "value < 2147483647".
  %2 = icmp slt i32 %1, 2147483647
  br i1 %2, label %label0, label %label1
label0:
;;5.1.3 Execute assignment "value := value + 1":
;;5.1.3.1 Evaluate expression "value + 1".
;;5.1.3.1.1 Evaluate expression "value".
;;5.1.3.1.1.1 State variable "value" is stored at position "0" of "%self$".
;;5.1.3.1.1.2 Let temporary "%3" be the corresponding address.
  %3 = getelementptr %counter$ref$ %self$, i32 0, i32 0
  %4 = load i32* %3
;;           The evaluation of "value" is "%4".
;;5.1.3.1.2 Evaluate expression "1".
;;5.1.3.1.2.1 An integer literal is represented as such in LLVM.
;;           The evaluation of "1" is "1".
;;5.1.3.1.3 Let temporary "%5" get the value of "value + 1".
  %5 = add i32 %4, 1
;;         The evaluation of "value + 1" is "%5".
;;5.1.3.2 Evaluate address for "value".
;;5.1.3.2.1 Variable "value" is stored at position 0 of "%self$".
;;           Let temporary %6 be the corresponding address:
  %6 = getelementptr %counter$ref$ %self$, i32 0, i32 0
;;5.1.3.3 Store value at address to achieve assignment.
  store i32 %5, i32* %6
  br label %exit
label1:
;;5.1.4 execute if branch "ELSE  error := TRUE END"
;;5.1.5 Execute assignment "error := TRUE":
;;5.1.5.1 Evaluate expression "TRUE".
;;5.1.5.1.1 A Boolean literal is represented as a one-bit integer in LLVM.
;;         The evaluation of "TRUE" is "1".
;;5.1.5.2 Evaluate address for "error".
;;5.1.5.2.1 Variable "error" is stored at position 1 of "%self$".
;;           Let temporary %7 be the corresponding address:
  %7 = getelementptr %counter$ref$ %self$, i32 0, i32 1
;;5.1.5.3 Store value at address to achieve assignment.
  store i1 1, i1* %7
  br label %exit
exit:
  ret void
}
;;6 The LLVM function implementing B operation "get" in "counter_i" follows.
define void @counter$get(%counter$ref$ %self$, i32* %res) {
entry:
;;6.1 Execute assignment "res := value":
;;6.1.1 Evaluate expression "value".
;;6.1.1.1 State variable "value" is stored at position "0" of "%self$".
;;6.1.1.2 Let temporary "%0" be the corresponding address.
  %0 = getelementptr %counter$ref$ %self$, i32 0, i32 0
  %1 = load i32* %0
;;       The evaluation of "value" is "%1".
;;6.1.2 Evaluate address for "res".
;;6.1.2.1 "res" is stored in the frame stack and represented by "%res".
;;6.1.3 Store value at address to achieve assignment.
  store i32 %1, i32* %res
  br label %exit
exit:
  ret void
}
