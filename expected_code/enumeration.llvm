;; -*- mode: asm -*-
;;   file generated with b2llvm
;;   B project settings: project.xml
;;   B module: enumeration
;;   B project directory: bxml
;;   code generation mode: component
;;   output file: enumeration.llvm
;;   
;;   This file contains LLVM code that implements B machine "enumeration".
;;   It is registered as a developed machine.
;;   The produced LLVM code is based on B implementation "enumeration_i".
;;   
;;1 The type encoding the state of "enumeration" is an aggregate and is defined as
;;   (using implementation "enumeration_i"):
;;1.1 Position "0" represents "current".
%enumeration$state$ = type {i1}
;;2 The type for references to state encodings of "enumeration" is:
%enumeration$ref$ = type %enumeration$state$*
;;3 The function implementing initialisation for "enumeration" is "@enumeration$init$"
;;   and has the following parameters:
;;3.1 "%self$": address of LLVM aggregate storing state of "enumeration";
define void @enumeration$init$(%enumeration$ref$ %self$) {
;;3.2 The entry point of the initialisation is:
entry:
;;3.3 Execute substitutions in initialisation of "enumeration_i" then exits:
;;3.3.1 Execute assignment "current := even":
;;3.3.1.1 Evaluate expression "even".
;;3.3.1.1.1 An enumerated value is represented as an integer literal.
;;         The evaluation of "even" is "0".
;;3.3.1.2 Evaluate address for "current".
;;3.3.1.2.1 Variable "current" is stored at position 0 of "%self$".
;;           Let temporary %0 be the corresponding address:
  %0 = getelementptr %enumeration$ref$ %self$, i32 0, i32 0
;;3.3.1.3 Store value at address to achieve assignment.
  store i1 0, i1* %0
  br label %exit
;;3.4 The exit point of the initialisation is:
exit:
  ret void
}
;;4 The LLVM function implementing B operation "tick" in "enumeration_i" follows.
define void @enumeration$tick(%enumeration$ref$ %self$) {
entry:
;;4.1 Execute "IF current = even THE..." and branch to "exit".
;;4.1.1 execute if branch "IF current = even THE..."
;;4.1.2 Evaluate formula "current = even", branch to "label0" if true, to "label1" otherwise.
;;4.1.2.1 Evaluate expression "current".
;;4.1.2.1.1 State variable "current" is stored at position "0" of "%self$".
;;4.1.2.1.2 Let temporary "%0" be the corresponding address.
  %0 = getelementptr %enumeration$ref$ %self$, i32 0, i32 0
  %1 = getelementptr i1* %0, i32 0
;;         The evaluation of "current" is "%1".
;;4.1.2.2 Evaluate expression "even".
;;4.1.2.2.1 An enumerated value is represented as an integer literal.
;;         The evaluation of "even" is "0".
;;4.1.2.3 Temporary "%2" gets the value of "current = even".
  %2 = icmp eq i1 %1, 0
  br i1 %2, label %label0, label %label1
label0:
;;4.1.3 Execute assignment "current := odd":
;;4.1.3.1 Evaluate expression "odd".
;;4.1.3.1.1 An enumerated value is represented as an integer literal.
;;         The evaluation of "odd" is "1".
;;4.1.3.2 Evaluate address for "current".
;;4.1.3.2.1 Variable "current" is stored at position 0 of "%self$".
;;           Let temporary %3 be the corresponding address:
  %3 = getelementptr %enumeration$ref$ %self$, i32 0, i32 0
;;4.1.3.3 Store value at address to achieve assignment.
  store i1 1, i1* %3
  br label %exit
label1:
;;4.1.4 execute if branch "ELSE  current := even..."
;;4.1.5 Execute assignment "current := even":
;;4.1.5.1 Evaluate expression "even".
;;4.1.5.1.1 An enumerated value is represented as an integer literal.
;;         The evaluation of "even" is "0".
;;4.1.5.2 Evaluate address for "current".
;;4.1.5.2.1 Variable "current" is stored at position 0 of "%self$".
;;           Let temporary %4 be the corresponding address:
  %4 = getelementptr %enumeration$ref$ %self$, i32 0, i32 0
;;4.1.5.3 Store value at address to achieve assignment.
  store i1 0, i1* %4
  br label %exit
exit:
  ret void
}
;;5 The LLVM function implementing B operation "read" in "enumeration_i" follows.
define void @enumeration$read(%enumeration$ref$ %self$, i1* %res) {
entry:
;;5.1 Execute assignment "res := current":
;;5.1.1 Evaluate expression "current".
;;5.1.1.1 State variable "current" is stored at position "0" of "%self$".
;;5.1.1.2 Let temporary "%0" be the corresponding address.
  %0 = getelementptr %enumeration$ref$ %self$, i32 0, i32 0
  %1 = getelementptr i1* %0, i32 0
;;       The evaluation of "current" is "%1".
;;5.1.2 Evaluate address for "res".
;;5.1.2.1 "res" is stored in the frame stack and represented by "%res".
;;5.1.3 Store value at address to achieve assignment.
  store i1 %1, i1* %res
  br label %exit
exit:
  ret void
}
