;; -*- mode: asm -*-
@.str0 = private constant [10 x i8] c"op1 = %i\0A\00", align 1 ; <[10 x i8]*> [#uses=1]
@.str1 = private constant [10 x i8] c"op2 = %i\0A\00", align 1 ; <[10 x i8]*> [#uses=1]
@.str2 = private constant [10 x i8] c"res = %i\0A\00", align 1 ; <[10 x i8]*> [#uses=1]
@.str3 = private constant [10 x i8] c" ok = %i\0A\00", align 1 ; <[10 x i8]*> [#uses=1]
@.str4 = private constant [70 x i8] c"Type 'i': inc1, 'd': dec1, 'I': inc2, 'D': dec2, 'c': calc, 'q': quit\00", align 1 ; <[70 x i8]*> [#uses=1]
@.str5 = private constant [16 x i8] c"Initializing...\00", align 1 ; <[16 x i8]*> [#uses=1]

define void @print_state() nounwind ssp {
entry:
	;;  display value of op1
  %0 = load i32* getelementptr inbounds (%mult_i$state$* @mult_i$self$, i64 0, i32 0), align 4 ; <i32> [#uses=1]
  %1 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str0, i64 0, i64 0), i32 %0) nounwind ; <i32> [#uses=0]
	;;  display value of op2
  %2 = load i32* getelementptr inbounds (%mult_i$state$* @mult_i$self$, i64 0, i32 1), align 4 ; <i32> [#uses=1]
  %3 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str1, i64 0, i64 0), i32 %2) nounwind ; <i32> [#uses=0]
	;;  display value of res
  %4 = load i32* getelementptr inbounds (%mult_i$state$* @mult_i$self$, i64 0, i32 2), align 4 ; <i32> [#uses=1]
  %5 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str2, i64 0, i64 0), i32 %4) nounwind ; <i32> [#uses=0]
	;;  display value of ok
  %6 = load i1* getelementptr inbounds (%mult_i$state$* @mult_i$self$, i64 0, i32 3), align 4 ; <i32> [#uses=1]
  %7 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str3, i64 0, i64 0), i1 %6) nounwind ; <i32> [#uses=0]
  ret void
}

declare i32 @printf(i8* nocapture, ...) nounwind

define i32 @main() nounwind ssp {
entry:
  %retval = alloca i32                            ; <i32*> [#uses=2]
  %0 = alloca i32                                 ; <i32*> [#uses=2]
  %c = alloca i8                                  ; <i8*> [#uses=2]
  %"alloca point" = bitcast i32 0 to i32          ; <i32> [#uses=0]
  %1 = call i32 @puts(i8* getelementptr inbounds ([16 x i8]* @.str5, i64 0, i64 0)) nounwind ; <i32> [#uses=0]
  call void @mult_i$init$(%mult_i$state$* @mult_i$self$) nounwind ssp
  call void @print_state() nounwind ssp
  br label %bb

bb:                                               ; preds = %bb3, %entry
  %2 = call i32 @puts(i8* getelementptr inbounds ([70 x i8]* @.str4, i64 0, i64 0)) nounwind ; <i32> [#uses=0]
  %3 = call i32 @getchar() nounwind               ; <i32> [#uses=1]
  %4 = trunc i32 %3 to i8                         ; <i8> [#uses=1]
  store i8 %4, i8* %c, align 1
  %5 = load i8* %c, align 1                       ; <i8> [#uses=1]
  %6 = sext i8 %5 to i32                          ; <i32> [#uses=1]
  switch i32 %6, label %bb7 [
    i32 105, label %bb1		; 'i': inc1
    i32 100, label %bb2		; 'd': dec1
    i32 73, label %bb3		; 'I': inc2
    i32 68, label %bb4          ; 'D': dec2
    i32 99, label %bb5          ; 'c': calc
    i32 113, label %bb6		; 'q': quit
  ]

bb1:                                              ; preds = %bb
  call void @mult_i$inc1(%mult_i$state$* @mult_i$self$) nounwind ssp
  br label %bb7

bb2:                                              ; preds = %bb
  call void @mult_i$dec1(%mult_i$state$* @mult_i$self$) nounwind ssp
  br label %bb7

bb3:                                              ; preds = %bb
  call void @mult_i$inc2(%mult_i$state$* @mult_i$self$) nounwind ssp
  br label %bb7

bb4:                                              ; preds = %bb
  call void @mult_i$dec2(%mult_i$state$* @mult_i$self$) nounwind ssp
  br label %bb7

bb5:                                              ; preds = %bb
  call void @mult_i$calc(%mult_i$state$* @mult_i$self$) nounwind ssp
  br label %bb7

bb6:                                              ; preds = %bb
  store i32 0, i32* %0, align 4
  %7 = load i32* %0, align 4                      ; <i32> [#uses=1]
  store i32 %7, i32* %retval, align 4
  br label %return

bb7:                                              ; preds = %bb1, %bb
  call void @print_state() nounwind ssp
  br label %bb

return:                                           ; preds = %bb2
  %retval4 = load i32* %retval                    ; <i32> [#uses=1]
  ret i32 %retval4
}

declare i32 @puts(i8*)

declare i32 @getchar()
