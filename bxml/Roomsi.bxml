<Machine name='Roomsi' type='implementation'>
<Abstraction>Rooms</Abstraction>
<Values>
<Valuation ident='ROOM'>
<Binary_Expression operator='..'>
<Attributes>
<TypeInfo>
<Unary_Expression operator='POW'>
<Identifier value='INTEGER' />
</Unary_Expression>
</TypeInfo>
</Attributes>
<Integer_Literal value='1'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
<Integer_Literal value='124'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Binary_Expression>
</Valuation>
<Valuation ident='price'>
<Binary_Expression operator='*'>
<Attributes>
<TypeInfo>
<Unary_Expression operator='POW'>
<Binary_Expression operator='*'>
<Identifier value='INTEGER' />
<Identifier value='INTEGER' />
</Binary_Expression>
</Unary_Expression>
</TypeInfo>
</Attributes>
<Identifier value='ROOM'>
<Attributes>
<TypeInfo>
<Unary_Expression operator='POW'>
<Identifier value='INTEGER' />
</Unary_Expression>
</TypeInfo>
</Attributes>
</Identifier>
<Unary_Expression operator='{'>
<Attributes>
<TypeInfo>
<Unary_Expression operator='POW'>
<Identifier value='INTEGER' />
</Unary_Expression>
</TypeInfo>
</Attributes>
<Integer_Literal value='10'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Unary_Expression>
</Binary_Expression>
</Valuation>
<Valuation ident='small'>
<Binary_Expression operator='..'>
<Attributes>
<TypeInfo>
<Unary_Expression operator='POW'>
<Identifier value='INTEGER' />
</Unary_Expression>
</TypeInfo>
</Attributes>
<Integer_Literal value='1'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
<Integer_Literal value='123'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Binary_Expression>
</Valuation>
<Valuation ident='defaultprice'>
<Integer_Literal value='70'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Valuation>
</Values>
<Initialisation>
<Skip />
</Initialisation>
<Operations>
<Operation name='sizequery'>
<Output_Parameters>
<Identifier value='ss'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Output_Parameters>
<Input_Parameters>
<Identifier value='rr'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Input_Parameters>
<Body>
<VAR_IN>
<Variables>
<Identifier value='tmp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Identifier value='ss_ret'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Body>
<Nary_Substitution operator=';'>
<Assignement_Substitution>
<Variables>
<Identifier value='tmp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Binary_Expression operator='mod'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
<Identifier value='rr'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Integer_Literal value='2'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Binary_Expression>
</Values>
</Assignement_Substitution>
<If_Substitution elseif='no'>
<Condition>
<Expression_Comparison operator='='>
<Identifier value='tmp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Integer_Literal value='1'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Expression_Comparison>
</Condition>
<Then>
<Assignement_Substitution>
<Variables>
<Identifier value='ss_ret'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Identifier value='little'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Values>
</Assignement_Substitution>
</Then>
<Else>
<Assignement_Substitution>
<Variables>
<Identifier value='ss_ret'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Identifier value='big'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Values>
</Assignement_Substitution>
</Else>
</If_Substitution>
<Assignement_Substitution>
<Variables>
<Identifier value='ss'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Identifier value='ss_ret'>
<Attributes>
<TypeInfo>
<Identifier value='SIZE' />
</TypeInfo>
</Attributes>
</Identifier>
</Values>
</Assignement_Substitution>
</Nary_Substitution>
</Body>
</VAR_IN>
</Body>
</Operation>
<Operation name='pricequery'>
<Output_Parameters>
<Identifier value='pp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Output_Parameters>
<Input_Parameters>
<Identifier value='rr'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Input_Parameters>
<Body>
<VAR_IN>
<Variables>
<Identifier value='tmp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Identifier value='pp_ret'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Body>
<Nary_Substitution operator=';'>
<Assignement_Substitution>
<Variables>
<Identifier value='tmp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Binary_Expression operator='mod'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
<Identifier value='rr'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Integer_Literal value='2'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Binary_Expression>
</Values>
</Assignement_Substitution>
<If_Substitution elseif='no'>
<Condition>
<Expression_Comparison operator='='>
<Identifier value='tmp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Integer_Literal value='1'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Expression_Comparison>
</Condition>
<Then>
<Assignement_Substitution>
<Variables>
<Identifier value='pp_ret'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Identifier value='defaultprice'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Values>
</Assignement_Substitution>
</Then>
<Else>
<Assignement_Substitution>
<Variables>
<Identifier value='pp_ret'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Binary_Expression operator='/'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
<Binary_Expression operator='*'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
<Identifier value='defaultprice'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
<Integer_Literal value='3'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Binary_Expression>
<Integer_Literal value='2'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Integer_Literal>
</Binary_Expression>
</Values>
</Assignement_Substitution>
</Else>
</If_Substitution>
<Assignement_Substitution>
<Variables>
<Identifier value='pp'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Variables>
<Values>
<Identifier value='pp_ret'>
<Attributes>
<TypeInfo>
<Identifier value='INTEGER' />
</TypeInfo>
</Attributes>
</Identifier>
</Values>
</Assignement_Substitution>
</Nary_Substitution>
</Body>
</VAR_IN>
</Body>
</Operation>
</Operations>
</Machine>